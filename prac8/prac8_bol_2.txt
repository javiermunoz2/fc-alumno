EJERCICIO 1a) gcc -static -g aritmetica_manual.s -o aritmetica_manualb) gdb aritmetica_manualc) layout splitd) layout regse) print(int)myVarEl valor inical es $1 = 3f) print (int*)&myVar0x401685-0x4c50f0g) x/4bx 0x4c50f0El valor es 0x03 0x00 0x00 0x00h) b mainPunto de interrupcion 1 en 0x401685run0x401685i) stepij) Antes: 3; Después: 8k) $0x2, %edxl) 64 - 63m) print (int)myVarEl valor de la variable es 63n) x/4bx 0x40169aEl valor = 0x89 0x05 0x50 0x3a### EJERCICIO 2 ###a) gcc -static -g array_manual.s -o array_manualb) gdb array_manualc) layout splitd) layout regse) b mainrunLa primera dirección es 0x401685f) stepi5001456g) x/20bx 0x4c50f00x4c50f0 - 0x4c5100h) print (int[4]*)&array$1 = (int (*)[4]) 0x4c50f0i) stepiEl registro RBXj) stepik) x/4bx 50014560x0a 0x00 0x00 0x00m) El valor tras ejecutar es 0x4016a1n) stepiEl valor en este punto es 0x4016a5El valor después de ejecutar es 0x401696ñ) stepiAccede a 0x40169d### EJERCICIO 3 ###a) nano funcion.cEste programa ejecuta una resta entre(minuendo y sustraendo)Contiene dos funciones, la primera (funcion_resta) y la principal (main)b) gcc -static -g funcion_manual.s -o funcion_manualc) gdb funcion_manuald) layout splite) layout regsf) b mainrung) stepiEl valor RSP en ese punto es 0x7fffffffdef8h) x/lqx 0x7fffffffdef8Contiene el valor de la dirección 0x00401adai) stepiSe han modificado los registros RIP y RSPEl valor de RSP ahora es 0x7fffffffdef0 j) x/lqx 0x7fffffffdef0 Contiene el valor de la dirección 0x0040169ek) x/2i 0x0040169eContiene dos funciones (add, inc)l) stepiEl valor de RSP ahora es 0x7fffffffdef8El valor de RIP ahora es 0x4016a2 <main+24>m) stepiEl valor de RSP ahora es 0x7fffffffdf00El valor de RIP ahora es 0x401ada <__libc_start_call_main+106>El valor de RIP lo toma para ejecutar librerias de sistema### EJERCICIO 4 ###a) nano funcion_manual.sb) gcc -static -g funcion_manual.s -o funcion_manualgdb funcion_manuallayout splitlayout regsb mainrunstepiVuelve a mainc) continueVa cambiando el valor del registro RSPd) ignore 1 100 e) continuef) x/100qx 0x7fffffffContiene los valores 0x0040169e      0x00000000      0x0040169e      0x00000000g) delete 1Continúa la ejecución del programa pero al ejecutar por segunda vez 'continue' el programa termina con la señal SIGSEGV, fallo de segmentación